// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

export interface ExtraVideoSearch {
  responseContext: ResponseContext;
  estimatedResults: string;
  trackingParams: string;
  header: Header;
  topbar: Topbar;
  onResponseReceivedCommands: OnResponseReceivedCommand[];
}

export interface Header {
  searchHeaderRenderer: SearchHeaderRenderer;
}

export interface SearchHeaderRenderer {
  searchFilterButton: SearchFilterButton;
  trackingParams: string;
}

export interface SearchFilterButton {
  buttonRenderer: SearchFilterButtonButtonRenderer;
}

export interface SearchFilterButtonButtonRenderer {
  style: string;
  size: string;
  isDisabled: boolean;
  text: TartuGecko;
  icon: Icon;
  tooltip: string;
  trackingParams: string;
  accessibilityData: AccessibilityData;
  command: PurpleCommand;
  iconPosition: string;
}

export interface AccessibilityData {
  accessibilityData: AccessibilityDataAccessibilityData;
}

export interface AccessibilityDataAccessibilityData {
  label: string;
}

export interface PurpleCommand {
  clickTrackingParams: string;
  openPopupAction: PurpleOpenPopupAction;
}

export interface PurpleOpenPopupAction {
  popup: PurplePopup;
  popupType: PopupType;
}

export interface PurplePopup {
  searchFilterOptionsDialogRenderer: SearchFilterOptionsDialogRenderer;
}

export interface SearchFilterOptionsDialogRenderer {
  title: TartuGecko;
  groups: Group[];
}

export interface Group {
  searchFilterGroupRenderer: SearchFilterGroupRenderer;
}

export interface SearchFilterGroupRenderer {
  title: PublishedTimeTextClass;
  filters: Filter[];
  trackingParams: string;
}

export interface Filter {
  searchFilterRenderer: SearchFilterRenderer;
}

export interface SearchFilterRenderer {
  label: PublishedTimeTextClass;
  navigationEndpoint?: SearchFilterRendererNavigationEndpoint;
  tooltip: string;
  trackingParams: string;
  status?: string;
}

export interface PublishedTimeTextClass {
  simpleText: string;
}

export interface SearchFilterRendererNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata: InlinePlaybackEndpointCommandMetadata;
  searchEndpoint: NavigationEndpointSearchEndpoint;
}

export interface InlinePlaybackEndpointCommandMetadata {
  webCommandMetadata: PurpleWebCommandMetadata;
}

export interface PurpleWebCommandMetadata {
  url: string;
  webPageType: WebPageType;
  rootVe: number;
  apiUrl?: PurpleAPIURL;
}

export enum PurpleAPIURL {
  YoutubeiV1Browse = "/youtubei/v1/browse",
}

export enum WebPageType {
  WebPageTypeBrowse = "WEB_PAGE_TYPE_BROWSE",
  WebPageTypeChannel = "WEB_PAGE_TYPE_CHANNEL",
  WebPageTypeSearch = "WEB_PAGE_TYPE_SEARCH",
  WebPageTypeShorts = "WEB_PAGE_TYPE_SHORTS",
  WebPageTypeUnknown = "WEB_PAGE_TYPE_UNKNOWN",
  WebPageTypeWatch = "WEB_PAGE_TYPE_WATCH",
}

export interface NavigationEndpointSearchEndpoint {
  query: Query;
  params?: string;
}

export enum Query {
  DaftPunkMusicVideos = "Daft Punk music videos",
}

export interface TartuGecko {
  runs: PurpleRun[];
}

export interface PurpleRun {
  text: string;
}

export enum PopupType {
  Dialog = "DIALOG",
}

export interface Icon {
  iconType: string;
}

export interface OnResponseReceivedCommand {
  clickTrackingParams: string;
  appendContinuationItemsAction: AppendContinuationItemsAction;
}

export interface AppendContinuationItemsAction {
  continuationItems: ContinuationItem[];
  targetId: string;
}

export interface ContinuationItem {
  itemSectionRenderer?: ItemSectionRenderer;
  continuationItemRenderer?: ContinuationItemRenderer;
}

export interface ContinuationItemRenderer {
  trigger: string;
  continuationEndpoint: ContinuationEndpoint;
  loggingDirectives: ContinuationItemRendererLoggingDirectives;
}

export interface ContinuationEndpoint {
  clickTrackingParams: string;
  commandMetadata: ContinuationEndpointCommandMetadata;
  continuationCommand: ContinuationCommand;
}

export interface ContinuationEndpointCommandMetadata {
  webCommandMetadata: FluffyWebCommandMetadata;
}

export interface FluffyWebCommandMetadata {
  sendPost: boolean;
  apiUrl?: FluffyAPIURL;
}

export enum FluffyAPIURL {
  YoutubeiV1AccountAccountMenu = "/youtubei/v1/account/account_menu",
  YoutubeiV1BrowseEditPlaylist = "/youtubei/v1/browse/edit_playlist",
  YoutubeiV1PlaylistCreate = "/youtubei/v1/playlist/create",
  YoutubeiV1Search = "/youtubei/v1/search",
  YoutubeiV1ShareGetSharePanel = "/youtubei/v1/share/get_share_panel",
}

export interface ContinuationCommand {
  token: string;
  request: string;
}

export interface ContinuationItemRendererLoggingDirectives {
  trackingParams: string;
}

export interface ItemSectionRenderer {
  contents: Content[];
  trackingParams: string;
}

export interface Content {
  videoRenderer?: VideoRenderer;
  reelShelfRenderer?: ReelShelfRenderer;
}

export interface ReelShelfRenderer {
  title: PublishedTimeTextClass;
  button: Button;
  items: ReelShelfRendererItem[];
  trackingParams: string;
  icon: Icon;
}

export interface Button {
  menuRenderer: ButtonMenuRenderer;
}

export interface ButtonMenuRenderer {
  items: PurpleItem[];
  trackingParams: string;
  accessibility: AccessibilityData;
}

export interface PurpleItem {
  menuNavigationItemRenderer: MenuNavigationItemRenderer;
}

export interface MenuNavigationItemRenderer {
  text: TartuGecko;
  icon: Icon;
  navigationEndpoint: MenuNavigationItemRendererNavigationEndpoint;
  trackingParams: string;
  accessibility: AccessibilityData;
}

export interface MenuNavigationItemRendererNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata: PurpleCommandMetadata;
  userFeedbackEndpoint: UserFeedbackEndpoint;
}

export interface PurpleCommandMetadata {
  webCommandMetadata: TentacledWebCommandMetadata;
}

export interface TentacledWebCommandMetadata {
  ignoreNavigation: boolean;
}

export interface UserFeedbackEndpoint {
  additionalDatas: AdditionalData[];
}

export interface AdditionalData {
  userFeedbackEndpointProductSpecificValueData: Param;
}

export interface Param {
  key: string;
  value: string;
}

export interface ReelShelfRendererItem {
  reelItemRenderer: ReelItemRenderer;
}

export interface ReelItemRenderer {
  videoId: string;
  headline: PublishedTimeTextClass;
  thumbnail: ReelWatchEndpointThumbnail;
  viewCountText: Text;
  navigationEndpoint: ReelItemRendererNavigationEndpoint;
  menu: Button;
  trackingParams: string;
  accessibility: AccessibilityData;
  style: ReelItemRendererStyle;
  videoType: VideoType;
  inlinePlaybackEndpoint: Endpoint;
  loggingDirectives: ReelItemRendererLoggingDirectives;
}

export interface Endpoint {
  clickTrackingParams: string;
  commandMetadata: InlinePlaybackEndpointCommandMetadata;
  watchEndpoint: WatchEndpoint;
}

export interface WatchEndpoint {
  videoId: string;
  playerParams: string;
  playerExtraUrlParams?: Param[];
  watchEndpointSupportedOnesieConfig: WatchEndpointSupportedOnesieConfig;
  params?: string;
}

export interface WatchEndpointSupportedOnesieConfig {
  html5PlaybackOnesieConfig: Html5PlaybackOnesieConfig;
}

export interface Html5PlaybackOnesieConfig {
  commonConfig: CommonConfig;
}

export interface CommonConfig {
  url: string;
}

export interface ReelItemRendererLoggingDirectives {
  trackingParams: string;
  visibility: Visibility;
  enableDisplayloggerExperiment: boolean;
}

export interface Visibility {
  types: string;
}

export interface ReelItemRendererNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata: InlinePlaybackEndpointCommandMetadata;
  reelWatchEndpoint: ReelWatchEndpoint;
}

export interface ReelWatchEndpoint {
  videoId: string;
  playerParams: string;
  thumbnail: ReelWatchEndpointThumbnail;
  overlay: Overlay;
  params: string;
  sequenceProvider: SequenceProvider;
  sequenceParams: string;
  loggingContext: LoggingContext;
  ustreamerConfig: UstreamerConfig;
}

export interface LoggingContext {
  vssLoggingContext: QoeLoggingContextClass;
  qoeLoggingContext: QoeLoggingContextClass;
}

export interface QoeLoggingContextClass {
  serializedContextData: SerializedContextData;
}

export enum SerializedContextData {
  CGIIDA3D3D = "CgIIDA%3D%3D",
}

export interface Overlay {
  reelPlayerOverlayRenderer: ReelPlayerOverlayRenderer;
}

export interface ReelPlayerOverlayRenderer {
  style: ReelPlayerOverlayRendererStyle;
  trackingParams: string;
  reelPlayerNavigationModel: ReelPlayerNavigationModel;
}

export enum ReelPlayerNavigationModel {
  ReelPlayerNavigationModelUnspecified = "REEL_PLAYER_NAVIGATION_MODEL_UNSPECIFIED",
}

export enum ReelPlayerOverlayRendererStyle {
  ReelPlayerOverlayStyleShorts = "REEL_PLAYER_OVERLAY_STYLE_SHORTS",
}

export enum SequenceProvider {
  ReelWatchSequenceProviderRPC = "REEL_WATCH_SEQUENCE_PROVIDER_RPC",
}

export interface ReelWatchEndpointThumbnail {
  thumbnails: ThumbnailElement[];
  isOriginalAspectRatio: boolean;
}

export interface ThumbnailElement {
  url: string;
  width: number;
  height: number;
}

export enum UstreamerConfig {
  CAwSGG1MdndaZU9QYzlpR3PxNnFMMkxGS1Q0PQ = "CAwSGG1MdndaZU9qYzlpR3pxNnFMMkxGS1Q0PQ==",
}

export enum ReelItemRendererStyle {
  ReelItemStyleAvatarCircle = "REEL_ITEM_STYLE_AVATAR_CIRCLE",
}

export enum VideoType {
  ReelVideoTypeVideo = "REEL_VIDEO_TYPE_VIDEO",
}

export interface Text {
  accessibility: AccessibilityData;
  simpleText: string;
}

export interface VideoRenderer {
  videoId: string;
  thumbnail: ChannelThumbnailWithLinkRendererThumbnail;
  title: VideoRendererTitle;
  longBylineText: LongBylineTextClass;
  publishedTimeText: PublishedTimeTextClass;
  lengthText: Text;
  viewCountText: PublishedTimeTextClass;
  navigationEndpoint: Endpoint;
  ownerText: LongBylineTextClass;
  shortBylineText: LongBylineTextClass;
  trackingParams: string;
  showActionMenu: boolean;
  shortViewCountText: Text;
  menu: Menu;
  channelThumbnailSupportedRenderers: ChannelThumbnailSupportedRenderers;
  thumbnailOverlays: ThumbnailOverlay[];
  richThumbnail: RichThumbnail;
  detailedMetadataSnippets?: DetailedMetadataSnippet[];
  inlinePlaybackEndpoint: Endpoint;
  searchVideoResultEntityKey: string;
  ownerBadges?: OwnerBadge[];
  badges?: Badge[];
}

export interface Badge {
  metadataBadgeRenderer: BadgeMetadataBadgeRenderer;
}

export interface BadgeMetadataBadgeRenderer {
  style: string;
  label: string;
  trackingParams: string;
  accessibilityData: AccessibilityDataAccessibilityData;
}

export interface ChannelThumbnailSupportedRenderers {
  channelThumbnailWithLinkRenderer: ChannelThumbnailWithLinkRenderer;
}

export interface ChannelThumbnailWithLinkRenderer {
  thumbnail: ChannelThumbnailWithLinkRendererThumbnail;
  navigationEndpoint: ChannelThumbnailWithLinkRendererNavigationEndpoint;
  accessibility: AccessibilityData;
}

export interface ChannelThumbnailWithLinkRendererNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata: InlinePlaybackEndpointCommandMetadata;
  browseEndpoint: NavigationEndpointBrowseEndpoint;
}

export interface NavigationEndpointBrowseEndpoint {
  browseId: string;
  canonicalBaseUrl?: string;
}

export interface ChannelThumbnailWithLinkRendererThumbnail {
  thumbnails: ThumbnailElement[];
}

export interface DetailedMetadataSnippet {
  snippetText: SnippetText;
  snippetHoverText: TartuGecko;
  maxOneLine: boolean;
}

export interface SnippetText {
  runs: SnippetTextRun[];
}

export interface SnippetTextRun {
  text: string;
  bold?: boolean;
}

export interface LongBylineTextClass {
  runs: LongBylineTextRun[];
}

export interface LongBylineTextRun {
  text: string;
  navigationEndpoint: ChannelThumbnailWithLinkRendererNavigationEndpoint;
}

export interface Menu {
  menuRenderer: PurpleMenuRenderer;
}

export interface PurpleMenuRenderer {
  items: FluffyItem[];
  trackingParams: string;
  accessibility: AccessibilityData;
}

export interface FluffyItem {
  menuServiceItemRenderer?: MenuServiceItemRenderer;
  menuServiceItemDownloadRenderer?: MenuServiceItemDownloadRenderer;
}

export interface MenuServiceItemDownloadRenderer {
  serviceEndpoint: MenuServiceItemDownloadRendererServiceEndpoint;
  trackingParams: string;
}

export interface MenuServiceItemDownloadRendererServiceEndpoint {
  clickTrackingParams: string;
  offlineVideoEndpoint: OfflineVideoEndpoint;
}

export interface OfflineVideoEndpoint {
  videoId: string;
  onAddCommand: OnAddCommand;
}

export interface OnAddCommand {
  clickTrackingParams: string;
  getDownloadActionCommand: GetDownloadActionCommand;
}

export interface GetDownloadActionCommand {
  videoId: string;
  params: GetDownloadActionCommandParams;
}

export enum GetDownloadActionCommandParams {
  CAI3D = "CAI%3D",
}

export interface MenuServiceItemRenderer {
  text: TartuGecko;
  icon: Icon;
  serviceEndpoint: ServiceEndpoint;
  trackingParams: string;
  hasSeparator?: boolean;
}

export interface ServiceEndpoint {
  clickTrackingParams: string;
  commandMetadata: ContinuationEndpointCommandMetadata;
  signalServiceEndpoint?: UntoggledServiceEndpointSignalServiceEndpoint;
  shareEntityServiceEndpoint?: ShareEntityServiceEndpoint;
  playlistEditEndpoint?: UntoggledServiceEndpointPlaylistEditEndpoint;
}

export interface UntoggledServiceEndpointPlaylistEditEndpoint {
  playlistId: PlaylistID;
  actions: PurpleAction[];
}

export interface PurpleAction {
  addedVideoId: string;
  action: HilariousAction;
}

export enum HilariousAction {
  ActionAddVideo = "ACTION_ADD_VIDEO",
}

export enum PlaylistID {
  Wl = "WL",
}

export interface ShareEntityServiceEndpoint {
  serializedShareEntity: string;
  commands: CommandElement[];
}

export interface CommandElement {
  clickTrackingParams: string;
  openPopupAction: FluffyOpenPopupAction;
}

export interface FluffyOpenPopupAction {
  popup: FluffyPopup;
  popupType: PopupType;
  beReused: boolean;
}

export interface FluffyPopup {
  unifiedSharePanelRenderer: UnifiedSharePanelRenderer;
}

export interface UnifiedSharePanelRenderer {
  trackingParams: string;
  showLoadingSpinner: boolean;
}

export interface UntoggledServiceEndpointSignalServiceEndpoint {
  signal: Signal;
  actions: FluffyAction[];
}

export interface FluffyAction {
  clickTrackingParams: string;
  addToPlaylistCommand: AddToPlaylistCommand;
}

export interface AddToPlaylistCommand {
  openMiniplayer: boolean;
  videoId: string;
  listType: ListType;
  onCreateListCommand: OnCreateListCommand;
  videoIds: string[];
}

export enum ListType {
  PlaylistEditListTypeQueue = "PLAYLIST_EDIT_LIST_TYPE_QUEUE",
}

export interface OnCreateListCommand {
  clickTrackingParams: string;
  commandMetadata: ContinuationEndpointCommandMetadata;
  createPlaylistServiceEndpoint: CreatePlaylistServiceEndpoint;
}

export interface CreatePlaylistServiceEndpoint {
  videoIds: string[];
  params: CreatePlaylistServiceEndpointParams;
}

export enum CreatePlaylistServiceEndpointParams {
  CAQ3D = "CAQ%3D",
}

export enum Signal {
  ClientSignal = "CLIENT_SIGNAL",
}

export interface OwnerBadge {
  metadataBadgeRenderer: OwnerBadgeMetadataBadgeRenderer;
}

export interface OwnerBadgeMetadataBadgeRenderer {
  icon: Icon;
  style: MetadataBadgeRendererStyle;
  tooltip: Tooltip;
  trackingParams: string;
  accessibilityData: AccessibilityDataAccessibilityData;
}

export enum MetadataBadgeRendererStyle {
  BadgeStyleTypeVerified = "BADGE_STYLE_TYPE_VERIFIED",
  BadgeStyleTypeVerifiedArtist = "BADGE_STYLE_TYPE_VERIFIED_ARTIST",
}

export enum Tooltip {
  OfficialArtistChannel = "Official Artist Channel",
  Verified = "Verified",
}

export interface RichThumbnail {
  movingThumbnailRenderer: MovingThumbnailRenderer;
}

export interface MovingThumbnailRenderer {
  movingThumbnailDetails: MovingThumbnailDetails;
  enableHoveredLogging: boolean;
  enableOverlay: boolean;
}

export interface MovingThumbnailDetails {
  thumbnails: ThumbnailElement[];
  logAsMovingThumbnail: boolean;
}

export interface ThumbnailOverlay {
  thumbnailOverlayTimeStatusRenderer?: ThumbnailOverlayTimeStatusRenderer;
  thumbnailOverlayToggleButtonRenderer?: ThumbnailOverlayToggleButtonRenderer;
  thumbnailOverlayNowPlayingRenderer?: ThumbnailOverlayRenderer;
  thumbnailOverlayLoadingPreviewRenderer?: ThumbnailOverlayRenderer;
}

export interface ThumbnailOverlayRenderer {
  text: TartuGecko;
}

export interface ThumbnailOverlayTimeStatusRenderer {
  text: Text;
  style: ThumbnailOverlayTimeStatusRendererStyle;
}

export enum ThumbnailOverlayTimeStatusRendererStyle {
  Default = "DEFAULT",
}

export interface ThumbnailOverlayToggleButtonRenderer {
  isToggled?: boolean;
  untoggledIcon: Icon;
  toggledIcon: Icon;
  untoggledTooltip: UntoggledTooltip;
  toggledTooltip: ToggledTooltip;
  untoggledServiceEndpoint: ServiceEndpoint;
  toggledServiceEndpoint?: ToggledServiceEndpoint;
  untoggledAccessibility: AccessibilityData;
  toggledAccessibility: AccessibilityData;
  trackingParams: string;
}

export interface ToggledServiceEndpoint {
  clickTrackingParams: string;
  commandMetadata: ContinuationEndpointCommandMetadata;
  playlistEditEndpoint: ToggledServiceEndpointPlaylistEditEndpoint;
}

export interface ToggledServiceEndpointPlaylistEditEndpoint {
  playlistId: PlaylistID;
  actions: TentacledAction[];
}

export interface TentacledAction {
  action: AmbitiousAction;
  removedVideoId: string;
}

export enum AmbitiousAction {
  ActionRemoveVideoByVideoID = "ACTION_REMOVE_VIDEO_BY_VIDEO_ID",
}

export enum ToggledTooltip {
  Added = "Added",
}

export enum UntoggledTooltip {
  AddToQueue = "Add to queue",
  WatchLater = "Watch later",
}

export interface VideoRendererTitle {
  runs: PurpleRun[];
  accessibility: AccessibilityData;
}

export interface ResponseContext {
  serviceTrackingParams: ServiceTrackingParam[];
  mainAppWebResponseContext: MainAppWebResponseContext;
  webResponseContextExtensionData: WebResponseContextExtensionData;
}

export interface MainAppWebResponseContext {
  loggedOut: boolean;
  trackingParam: string;
}

export interface ServiceTrackingParam {
  service: string;
  params: Param[];
}

export interface WebResponseContextExtensionData {
  hasDecorated: boolean;
}

export interface Topbar {
  desktopTopbarRenderer: DesktopTopbarRenderer;
}

export interface DesktopTopbarRenderer {
  logo: Logo;
  searchbox: Searchbox;
  trackingParams: string;
  topbarButtons: TopbarButton[];
  hotkeyDialog: HotkeyDialog;
  backButton: BackButtonClass;
  forwardButton: BackButtonClass;
  a11ySkipNavigationButton: A11YSkipNavigationButtonClass;
  voiceSearchButton: PurpleButton;
}

export interface A11YSkipNavigationButtonClass {
  buttonRenderer: A11YSkipNavigationButtonButtonRenderer;
}

export interface A11YSkipNavigationButtonButtonRenderer {
  style: string;
  size: string;
  isDisabled: boolean;
  text: TartuGecko;
  trackingParams: string;
  command?: FluffyCommand;
}

export interface FluffyCommand {
  clickTrackingParams: string;
  commandMetadata: CommandCommandMetadata;
  signalServiceEndpoint: CommandSignalServiceEndpoint;
}

export interface CommandCommandMetadata {
  webCommandMetadata: StickyWebCommandMetadata;
}

export interface StickyWebCommandMetadata {
  sendPost: boolean;
}

export interface CommandSignalServiceEndpoint {
  signal: Signal;
  actions: StickyAction[];
}

export interface StickyAction {
  clickTrackingParams: string;
  signalAction: SignalAction;
}

export interface SignalAction {
  signal: string;
}

export interface BackButtonClass {
  buttonRenderer: BackButtonButtonRenderer;
}

export interface BackButtonButtonRenderer {
  trackingParams: string;
  command: FluffyCommand;
}

export interface HotkeyDialog {
  hotkeyDialogRenderer: HotkeyDialogRenderer;
}

export interface HotkeyDialogRenderer {
  title: TartuGecko;
  sections: Section[];
  dismissButton: A11YSkipNavigationButtonClass;
  trackingParams: string;
}

export interface Section {
  hotkeyDialogSectionRenderer: HotkeyDialogSectionRenderer;
}

export interface HotkeyDialogSectionRenderer {
  title: TartuGecko;
  options: Option[];
}

export interface Option {
  hotkeyDialogSectionOptionRenderer: HotkeyDialogSectionOptionRenderer;
}

export interface HotkeyDialogSectionOptionRenderer {
  label: TartuGecko;
  hotkey: string;
  hotkeyAccessibilityLabel?: AccessibilityData;
}

export interface Logo {
  topbarLogoRenderer: TopbarLogoRenderer;
}

export interface TopbarLogoRenderer {
  iconImage: Icon;
  tooltipText: TartuGecko;
  endpoint: EndpointClass;
  trackingParams: string;
  overrideEntityKey: string;
}

export interface EndpointClass {
  clickTrackingParams: string;
  commandMetadata: InlinePlaybackEndpointCommandMetadata;
  browseEndpoint: EndpointBrowseEndpoint;
}

export interface EndpointBrowseEndpoint {
  browseId: string;
}

export interface Searchbox {
  fusionSearchboxRenderer: FusionSearchboxRenderer;
}

export interface FusionSearchboxRenderer {
  icon: Icon;
  placeholderText: TartuGecko;
  config: Config;
  trackingParams: string;
  searchEndpoint: FusionSearchboxRendererSearchEndpoint;
  clearButton: PurpleButton;
}

export interface VoiceSearchDialogRenderer {
  placeholderHeader: TartuGecko;
  promptHeader: TartuGecko;
  exampleQuery1: TartuGecko;
  exampleQuery2: TartuGecko;
  promptMicrophoneLabel: TartuGecko;
  loadingHeader: TartuGecko;
  connectionErrorHeader: TartuGecko;
  connectionErrorMicrophoneLabel: TartuGecko;
  permissionsHeader: TartuGecko;
  permissionsSubtext: TartuGecko;
  disabledHeader: TartuGecko;
  disabledSubtext: TartuGecko;
  microphoneButtonAriaLabel: TartuGecko;
  exitButton: PurpleButton;
  trackingParams: string;
  microphoneOffPromptHeader: TartuGecko;
}

export interface TentacledPopup {
  voiceSearchDialogRenderer: VoiceSearchDialogRenderer;
}

export interface TentacledOpenPopupAction {
  popup: TentacledPopup;
  popupType: string;
}

export interface IndigoAction {
  clickTrackingParams: string;
  openPopupAction: TentacledOpenPopupAction;
}

export interface PurpleSignalServiceEndpoint {
  signal: Signal;
  actions: IndigoAction[];
}

export interface ButtonRendererServiceEndpoint {
  clickTrackingParams: string;
  commandMetadata: CommandCommandMetadata;
  signalServiceEndpoint: PurpleSignalServiceEndpoint;
}

export interface VoiceSearchButtonButtonRenderer {
  style: string;
  size: string;
  isDisabled: boolean;
  icon: Icon;
  trackingParams: string;
  accessibilityData: AccessibilityData;
  serviceEndpoint?: ButtonRendererServiceEndpoint;
  tooltip?: string;
}

export interface PurpleButton {
  buttonRenderer: VoiceSearchButtonButtonRenderer;
}

export interface Config {
  webSearchboxConfig: WebSearchboxConfig;
}

export interface WebSearchboxConfig {
  requestLanguage: string;
  requestDomain: string;
  hasOnscreenKeyboard: boolean;
  focusSearchbox: boolean;
}

export interface FusionSearchboxRendererSearchEndpoint {
  clickTrackingParams: string;
  commandMetadata: InlinePlaybackEndpointCommandMetadata;
  searchEndpoint: SearchEndpointSearchEndpoint;
}

export interface SearchEndpointSearchEndpoint {
  query: string;
}

export interface TopbarButton {
  topbarMenuButtonRenderer?: TopbarMenuButtonRenderer;
  buttonRenderer?: TopbarButtonButtonRenderer;
}

export interface TopbarButtonButtonRenderer {
  style: string;
  size: string;
  text: TartuGecko;
  icon: Icon;
  navigationEndpoint: ButtonRendererNavigationEndpoint;
  trackingParams: string;
  targetId: string;
}

export interface ButtonRendererNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata: InlinePlaybackEndpointCommandMetadata;
  signInEndpoint: SignInEndpoint;
}

export interface SignInEndpoint {
  idamTag: string;
}

export interface TopbarMenuButtonRenderer {
  icon: Icon;
  menuRequest: MenuRequest;
  trackingParams: string;
  accessibility: AccessibilityData;
  tooltip: string;
  style: string;
}

export interface MenuRequest {
  clickTrackingParams: string;
  commandMetadata: ContinuationEndpointCommandMetadata;
  signalServiceEndpoint: MenuRequestSignalServiceEndpoint;
}

export interface MenuRequestSignalServiceEndpoint {
  signal: string;
  actions: IndecentAction[];
}

export interface IndecentAction {
  clickTrackingParams: string;
  openPopupAction: StickyOpenPopupAction;
}

export interface StickyOpenPopupAction {
  popup: StickyPopup;
  popupType: string;
  beReused: boolean;
}

export interface StickyPopup {
  multiPageMenuRenderer: MultiPageMenuRenderer;
}

export interface MultiPageMenuRenderer {
  trackingParams: string;
  style: string;
  showLoadingSpinner: boolean;
}
